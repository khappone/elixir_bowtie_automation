---
# Basic demo of using Ansible to create a virtual machine on Pouta.csc.fi
#
# You'll need to download and source your credentials before this will work:
#  https://research.csc.fi/pouta-credentials
#
- name: Create virtual machine on cPouta
  hosts: localhost # The OpenStack modules run on your local machine.
  connection: local

  vars:
    # These will need changing based on your project
    demo_key: kalle
    demo_sg: demo-sg-kalle
    demo_security_groups: default,{{ demo_sg }} # don't add spaces here!
    demo_floating_ip: add_floating_ip # Add one of your IPs here

  tasks:
    - name: Create security group
      os_security_group: name={{ demo_sg }}

    - name: Add rule to security group to allow http from the internet
      os_security_group_rule:
        security_group: "{{ demo_sg }}"
        protocol: tcp
        port_range_min: 80
        port_range_max: 80
        remote_ip_prefix: 0.0.0.0/0

    - name: Add rule to security group to all ssh from current system
      os_security_group_rule:
        security_group: "{{ demo_sg }}"
        protocol: tcp
        port_range_min: 22
        port_range_max: 22
        remote_ip_prefix: "{{ ansible_default_ipv4.address }}/32"

    - name: Create a virtual machine
      register: result
      os_server:
        name: pouta-demo
        image: CentOS-7.0
        flavor: standard.tiny
        key_name: "{{ demo_key }}"
        security_groups: "{{ demo_security_groups }}"
        floating_ips: "{{ demo_floating_ip }}"

    - name: Create a virtual machine
      register: result
      os_server:
        name: pouta-demo
        image: CentOS-7.0
        flavor: standard.tiny
        key_name: "{{ demo_key }}"
        security_groups: "{{ demo_security_groups }}"
      until: (result.openstack is defined) and (result.openstack.networks.values()[0] | length > 1)
      delay: 20
      retries: 50 

    - name: Store the auto-allocated floating IP address
      set_fact: floating_ip={{ result.openstack.networks.values()[0][1] }}
    - name: Add new host to inventory
      add_host: name={{ floating_ip }} groups=new
    - name: clear ssh known_hosts
      known_hosts: name={{ floating_ip }} state=absent
      when: result | changed
    - name: Wait for instance to be ready
      wait_for: host={{ floating_ip }} port=22 search_regex=OpenSSH delay=60

